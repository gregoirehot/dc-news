@import 'variables';

// Return a value without its unit
@function trim-unit($value) {
  @return $value / ($value * 0 + 1);
}

// Convert pixel values into rem values
@function rem($value) {
  @return trim-unit($value) / trim-unit($font-size-base) * 1rem;
}

@mixin size($s) {
  font-size: $s / 16 + em;
}

// =================== MEDIAQUERIES ==========================

$mediaquery: (
  micro-max: #{rem(379px)},
  micro-min: #{rem(380px)},
  mobile-max: #{rem(479px)},
  mobile-min: #{rem(480px)},
  fablet-max: #{rem(575px)},
  fablet-min: #{rem(576px)},
  tablet-max: #{rem(767px)},
  tablet-min: #{rem(768px)},
  desktop-max: #{rem(979px)},
  desktop-min: #{rem(980px)},
  large-max: #{rem(1279px)},
  large-min: #{rem(1280px)}
);

// Media Queries
@function mediaquery($key) {
  @return map-get($mediaquery, $key);
}

// or
@function mq($key) {
  @return map-get($mediaquery, $key);
}

// MEDIA QUERIES RANGES
@mixin mediaquery-between($min, $max) {
  // convert string values in variables
  @if type-of($min) == string {
    $min: mediaquery($min);
  }

  @else {
    $min: rem($min);
  }

  @if type-of($max) == string {
    $max: mediaquery($max);
  }

  @else {
    $max: rem($max);
  }

  @if $min != null and $max != null {
    @media screen and (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
}
// alertative versions
@mixin mediaquery-range($min, $max) {
  @include mediaquery-between($min, $max);
}

@mixin mq-between($min, $max) {
  @include mediaquery-between($min, $max);
}

@mixin mq-range($min, $max) {
  @include mediaquery-between($min, $max);
}

// =================== TRANSITIONS ==========================
@mixin transition($transition) {
  -webkit-transition: $transition;
  transition: $transition;
}

@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  transform-origin: $origin;
}

@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
  -ms-transform: translate($x, $y);
  transform: translate($x, $y);
}

@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
  -ms-transform: rotate($degrees);
  transform: rotate($degrees);
}

@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
  transition-delay: $transition-delay;
}

@mixin scale($ratio, $ratio-y) {
  -webkit-transform: scale($ratio, $ratio-y);
  -ms-transform: scale($ratio, $ratio-y);
  transform: scale($ratio, $ratio-y);
}

@mixin translateRotate($degrees, $x, $y) {
  -webkit-transform: translate($x, $y) rotate($degrees);
  -ms-transform: translate($x, $y) rotate($degrees);
  transform: translate($x, $y) rotate($degrees);
}

@mixin scaleRotate($degrees, $ratio, $ratio-y) {
  -webkit-transform: scale($ratio, $ratio-y) rotate($degrees);
  -ms-transform: scale($ratio, $ratio-y) rotate($degrees);
  transform: scale($ratio, $ratio-y) rotate($degrees);
}

@mixin translateScale($x, $y, $ratio, $ratio-y) {
  -webkit-transform: translate($x, $y) scale($ratio, $ratio-y);
  -moz-transform: translate($x, $y) scale($ratio, $ratio-y);
  -ms-transform: translate($x, $y) scale($ratio, $ratio-y);
  -o-transform: translate($x, $y) scale($ratio, $ratio-y);
  transform: translate($x, $y) scale($ratio, $ratio-y);
}

@mixin translateSkew($x, $y, $ratio, $ratio-y) {
  -webkit-transform: translate($x, $y) skew($ratio, $ratio-y);
  -moz-transform: translate($x, $y) skew($ratio, $ratio-y);
  -ms-transform: translate($x, $y) skew($ratio, $ratio-y);
  -o-transform: translate($x, $y) skew($ratio, $ratio-y);
  transform: translate($x, $y) skew($ratio, $ratio-y);
}

@mixin perspectiveRotate3D($p, $rx, $ry, $rz) {
  -webkit-transform: perspective($p) rotateX($rx) rotateY($ry) rotateZ($rz);
  -moz-transform: perspective($p) rotateX($rx) rotateY($ry) rotateZ($rz);
  -ms-transform: perspective($p) rotateX($rx) rotateY($ry) rotateZ($rz);
  -o-transform: perspective($p) rotateX($rx) rotateY($ry) rotateZ($rz);
  transform: perspective($p) rotateX($rx) rotateY($ry) rotateZ($rz);
}

@mixin skew($x, $y) {
  -webkit-transform: skew($x, $y);
  -moz-transform: skew($x, $y);
  -ms-transform: skew($x, $y);
  -o-transform: skew($x, $y);
  transform: skew($x, $y);
}

@mixin box-shadow($shaddow) {
  -moz-box-shadow: $shaddow;
  -webkit-box-shadow: $shaddow;
  box-shadow: $shaddow;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin gradient-vertical($color-1, $p1, $color-2, $p2) {
  @include background-duplicate(background, -moz-linear-gradient(top, $color-1 $p1, $color-2 $p2));
  @include background-duplicate(background, linear-gradient(to bottom, $color-1 $p1, $color-2 $p2));
  @include background-duplicate(background, -webkit-linear-gradient(top, $color-1 $p1, $color-2 $p2));

  background: $color-1;
}

@mixin animation($animation) {
  -webkit-animation: $animation;
  animation: $animation;
}

@mixin grayscale($p) {
  -webkit-filter: grayscale($p);
  filter: grayscale($p);
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @-ms-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

@mixin position-duplicate($property, $value) {
  #{$property}: $value;
}

@mixin background-duplicate($property, $value) {
  #{$property}: $value;
}
